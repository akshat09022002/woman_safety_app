import React, { useState, useEffect } from "react";
import {
  GoogleMap,
  Marker,
  DirectionsRenderer,
  LoadScript,
} from "@react-google-maps/api";
import { useParams } from "react-router-dom";

const mapContainerStyle = {
  width: "100%",
  height: "400px",
};

const MapComponent = () => {
  const { locationType } = useParams(); // Get location type from URL params
  const [currentLocation, setCurrentLocation] = useState(null);
  const [nearbyPlaces, setNearbyPlaces] = useState([]);
  const [directions, setDirections] = useState(null);

  const apiKey = "YOUR_GOOGLE_MAPS_API_KEY"; // Replace with your API Key

  useEffect(() => {
    // Get current location
    navigator.geolocation.getCurrentPosition((position) => {
      const location = {
        lat: position.coords.latitude,
        lng: position.coords.longitude,
      };
      setCurrentLocation(location);
    });
  }, []);

  useEffect(() => {
    if (currentLocation) {
      fetchNearbyPlaces(currentLocation, locationType);
    }
  }, [currentLocation, locationType]);

  const fetchNearbyPlaces = (location, type) => {
    const service = new window.google.maps.places.PlacesService(
      document.createElement("div")
    );
    const request = {
      location,
      radius: "5000", // 5km radius
      type:
        type === "police"
          ? "police"
          : type === "hospital"
          ? "hospital"
          : "subway_station",
    };

    service.nearbySearch(request, (results, status) => {
      if (status === window.google.maps.places.PlacesServiceStatus.OK) {
        setNearbyPlaces(results.slice(0, 5)); // Take the top 5 results
      }
    });
  };

  const handleDirections = (destination) => {
    const directionsService = new window.google.maps.DirectionsService();

    directionsService.route(
      {
        origin: currentLocation,
        destination: destination.geometry.location,
        travelMode: window.google.maps.TravelMode.DRIVING,
      },
      (result, status) => {
        if (status === window.google.maps.DirectionsStatus.OK) {
          setDirections(result);
        } else {
          console.error(`error fetching directions ${result}`);
        }
      }
    );
  };

  return (
    <div>
      <LoadScript googleMapsApiKey={apiKey} libraries={["places"]}>
        <GoogleMap
          mapContainerStyle={mapContainerStyle}
          zoom={14}
          center={currentLocation}
        >
          {currentLocation && (
            <Marker
              position={currentLocation}
              label="Me"
              icon="http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
            />
          )}
          {nearbyPlaces.map((place) => (
            <Marker
              key={place.place_id}
              position={place.geometry.location}
              label={place.name}
              onClick={() => handleDirections(place)}
            />
          ))}
          {directions && <DirectionsRenderer directions={directions} />}
        </GoogleMap>
      </LoadScript>
    </div>
  );
};

export default MapComponent;
